{
  "uid" : "3c8d9fa41082e9ff",
  "name" : "填写查询对象",
  "fullName" : "testcases.tmp.test_common_user.test_xzbb.Test_xzbb#test_5",
  "historyId" : "9212fd708dfe5eb74563dd58dd724c0a",
  "time" : {
    "start" : 1738839592734,
    "stop" : 1738839716981,
    "duration" : 124247
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00AB8D03+51395]\n\t(No symbol) [0x00A25F61]\n\t(No symbol) [0x008DE004]\n\t(No symbol) [0x009171C7]\n\t(No symbol) [0x0090E54E]\n\t(No symbol) [0x00933E8C]\n\t(No symbol) [0x0090DF7E]\n\t(No symbol) [0x00934124]\n\t(No symbol) [0x0094A570]\n\t(No symbol) [0x00933C26]\n\t(No symbol) [0x0090C629]\n\t(No symbol) [0x0090D40D]\n\tGetHandleVerifier [0x00E368D3+3712147]\n\tGetHandleVerifier [0x00E75CBA+3971194]\n\tGetHandleVerifier [0x00E70FA8+3951464]\n\tGetHandleVerifier [0x00B69D09+776393]\n\t(No symbol) [0x00A31734]\n\t(No symbol) [0x00A2C618]\n\t(No symbol) [0x00A2C7C9]\n\t(No symbol) [0x00A1DDF0]\n\tBaseThreadInitThunk [0x75987BA9+25]\n\tRtlInitializeExceptionChain [0x77DBC0CB+107]\n\tRtlClearBits [0x77DBC04F+191]",
  "statusTrace" : "self = <test_xzbb.Test_xzbb object at 0x000002EFC2B730A0>\n\n    @allure.title('填写查询对象')\n    def test_5(self):\n        step = [5, '填写查询对象', 'base_select_field', 'by_loc,//form[3]/div/div/div/div/div/div/div', 2, '主机']\n>       exec_step(self, step)\n\ntestcases\\tmp\\test_common_user\\test_xzbb.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\_code\\template\\func_template.py:55: in exec_step\n    raise e\nbase\\_code\\template\\func_template.py:45: in exec_step\n    raise e\nbase\\_code\\template\\func_template.py:39: in exec_step\n    kw_func(*args, instance=instance)\nbase\\kdt_lib\\fields_mixin.py:99: in key_base_select_field\n    component.input_box(field, search_for=search_for, options=options, auto_unfold=False, instance=instance)\nbase\\kdt_lib\\components.py:635: in input_box\n    self.handle_options(options, lis, instance=None)\nbase\\kdt_lib\\components.py:671: in handle_options\n    target_lis[0].click()\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002EFC2BAE4F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DBC0CB+107]\\\\n\\\\tRtlClearBits [0x77DBC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00AB8D03+51395]\nE       \t(No symbol) [0x00A25F61]\nE       \t(No symbol) [0x008DE004]\nE       \t(No symbol) [0x009171C7]\nE       \t(No symbol) [0x0090E54E]\nE       \t(No symbol) [0x00933E8C]\nE       \t(No symbol) [0x0090DF7E]\nE       \t(No symbol) [0x00934124]\nE       \t(No symbol) [0x0094A570]\nE       \t(No symbol) [0x00933C26]\nE       \t(No symbol) [0x0090C629]\nE       \t(No symbol) [0x0090D40D]\nE       \tGetHandleVerifier [0x00E368D3+3712147]\nE       \tGetHandleVerifier [0x00E75CBA+3971194]\nE       \tGetHandleVerifier [0x00E70FA8+3951464]\nE       \tGetHandleVerifier [0x00B69D09+776393]\nE       \t(No symbol) [0x00A31734]\nE       \t(No symbol) [0x00A2C618]\nE       \t(No symbol) [0x00A2C7C9]\nE       \t(No symbol) [0x00A1DDF0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DBC0CB+107]\nE       \tRtlClearBits [0x77DBC04F+191]\n\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1738839579348,
      "stop" : 1738839579531,
      "duration" : 183
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup_class",
    "time" : {
      "start" : 1738839579531,
      "stop" : 1738839587783,
      "duration" : 8252
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00AB8D03+51395]\n\t(No symbol) [0x00A25F61]\n\t(No symbol) [0x008DE004]\n\t(No symbol) [0x009171C7]\n\t(No symbol) [0x0090E54E]\n\t(No symbol) [0x00933E8C]\n\t(No symbol) [0x0090DF7E]\n\t(No symbol) [0x00934124]\n\t(No symbol) [0x0094A570]\n\t(No symbol) [0x00933C26]\n\t(No symbol) [0x0090C629]\n\t(No symbol) [0x0090D40D]\n\tGetHandleVerifier [0x00E368D3+3712147]\n\tGetHandleVerifier [0x00E75CBA+3971194]\n\tGetHandleVerifier [0x00E70FA8+3951464]\n\tGetHandleVerifier [0x00B69D09+776393]\n\t(No symbol) [0x00A31734]\n\t(No symbol) [0x00A2C618]\n\t(No symbol) [0x00A2C7C9]\n\t(No symbol) [0x00A1DDF0]\n\tBaseThreadInitThunk [0x75987BA9+25]\n\tRtlInitializeExceptionChain [0x77DBC0CB+107]\n\tRtlClearBits [0x77DBC04F+191]",
    "statusTrace" : "self = <test_xzbb.Test_xzbb object at 0x000002EFC2B730A0>\n\n    @allure.title('填写查询对象')\n    def test_5(self):\n        step = [5, '填写查询对象', 'base_select_field', 'by_loc,//form[3]/div/div/div/div/div/div/div', 2, '主机']\n>       exec_step(self, step)\n\ntestcases\\tmp\\test_common_user\\test_xzbb.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\_code\\template\\func_template.py:55: in exec_step\n    raise e\nbase\\_code\\template\\func_template.py:45: in exec_step\n    raise e\nbase\\_code\\template\\func_template.py:39: in exec_step\n    kw_func(*args, instance=instance)\nbase\\kdt_lib\\fields_mixin.py:99: in key_base_select_field\n    component.input_box(field, search_for=search_for, options=options, auto_unfold=False, instance=instance)\nbase\\kdt_lib\\components.py:635: in input_box\n    self.handle_options(options, lis, instance=None)\nbase\\kdt_lib\\components.py:671: in handle_options\n    target_lis[0].click()\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002EFC2BAE4F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DBC0CB+107]\\\\n\\\\tRtlClearBits [0x77DBC04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00AB8D03+51395]\nE       \t(No symbol) [0x00A25F61]\nE       \t(No symbol) [0x008DE004]\nE       \t(No symbol) [0x009171C7]\nE       \t(No symbol) [0x0090E54E]\nE       \t(No symbol) [0x00933E8C]\nE       \t(No symbol) [0x0090DF7E]\nE       \t(No symbol) [0x00934124]\nE       \t(No symbol) [0x0094A570]\nE       \t(No symbol) [0x00933C26]\nE       \t(No symbol) [0x0090C629]\nE       \t(No symbol) [0x0090D40D]\nE       \tGetHandleVerifier [0x00E368D3+3712147]\nE       \tGetHandleVerifier [0x00E75CBA+3971194]\nE       \tGetHandleVerifier [0x00E70FA8+3951464]\nE       \tGetHandleVerifier [0x00B69D09+776393]\nE       \t(No symbol) [0x00A31734]\nE       \t(No symbol) [0x00A2C618]\nE       \t(No symbol) [0x00A2C7C9]\nE       \t(No symbol) [0x00A1DDF0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DBC0CB+107]\nE       \tRtlClearBits [0x77DBC04F+191]\n\nD:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException",
    "steps" : [ {
      "name" : "填写查询对象",
      "time" : {
        "start" : 1738839592734,
        "stop" : 1738839716484,
        "duration" : 123750
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00AB8D03+51395]\n\t(No symbol) [0x00A25F61]\n\t(No symbol) [0x008DE004]\n\t(No symbol) [0x009171C7]\n\t(No symbol) [0x0090E54E]\n\t(No symbol) [0x00933E8C]\n\t(No symbol) [0x0090DF7E]\n\t(No symbol) [0x00934124]\n\t(No symbol) [0x0094A570]\n\t(No symbol) [0x00933C26]\n\t(No symbol) [0x0090C629]\n\t(No symbol) [0x0090D40D]\n\tGetHandleVerifier [0x00E368D3+3712147]\n\tGetHandleVerifier [0x00E75CBA+3971194]\n\tGetHandleVerifier [0x00E70FA8+3951464]\n\tGetHandleVerifier [0x00B69D09+776393]\n\t(No symbol) [0x00A31734]\n\t(No symbol) [0x00A2C618]\n\t(No symbol) [0x00A2C7C9]\n\t(No symbol) [0x00A1DDF0]\n\tBaseThreadInitThunk [0x75987BA9+25]\n\tRtlInitializeExceptionChain [0x77DBC0CB+107]\n\tRtlClearBits [0x77DBC04F+191]\n\n",
      "statusTrace" : "  File \"D:\\项目资料\\auto\\acmdb_uitest_6.x\\base\\_code\\template\\func_template.py\", line 39, in exec_step\n    kw_func(*args, instance=instance)\n  File \"D:\\项目资料\\auto\\acmdb_uitest_6.x\\base\\kdt_lib\\fields_mixin.py\", line 99, in key_base_select_field\n    component.input_box(field, search_for=search_for, options=options, auto_unfold=False, instance=instance)\n  File \"D:\\项目资料\\auto\\acmdb_uitest_6.x\\base\\kdt_lib\\components.py\", line 635, in input_box\n    self.handle_options(options, lis, instance=None)\n  File \"D:\\项目资料\\auto\\acmdb_uitest_6.x\\base\\kdt_lib\\components.py\", line 671, in handle_options\n    target_lis[0].click()\n  File \"D:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "d2f84b31acbdc620",
      "name" : "填写查询对象",
      "source" : "d2f84b31acbdc620.png",
      "type" : "image/png",
      "size" : 61430
    }, {
      "uid" : "4803ed9715189d65",
      "name" : "log",
      "source" : "4803ed9715189d65.txt",
      "type" : "text/plain",
      "size" : 5318
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "setup_class::0",
    "time" : {
      "start" : 1738839718560,
      "stop" : 1738839718730,
      "duration" : 170
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "debug (2)"
  }, {
    "name" : "feature",
    "value" : "新增报表"
  }, {
    "name" : "tag",
    "value" : "order(1)"
  }, {
    "name" : "parentSuite",
    "value" : "testcases.tmp.test_common_user"
  }, {
    "name" : "suite",
    "value" : "test_xzbb"
  }, {
    "name" : "subSuite",
    "value" : "Test_xzbb"
  }, {
    "name" : "host",
    "value" : "LAPTOP-TODGQMP2"
  }, {
    "name" : "thread",
    "value" : "15892-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.tmp.test_common_user.test_xzbb"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "order(1)" ]
  },
  "source" : "3c8d9fa41082e9ff.json",
  "parameterValues" : [ ]
}